h1. DIJON FRAMEWORK

Dijon is an IOC and DI micro-framework for Javascript. Originally it was meant to be a port of Robotlegs,
but deviated to something quite different. It remains however heavily inspired by Robotlegs, and more specifically
Swiftsuspenders.

Basically it's an object registry, that allows you to define how and when objects are instantiated, functions and handlers
are called and what objects should be passed on to other objects (that's the injection thingy) 

"pronunciation":http://www.audioenglish.net/dictionary/dijon.htm

Dijon is a city in France. They make the best mustard. And I can pretend it's an acronym for
Dependency Injection of Javascript Objects N... umm, never found a good fit for 'N'

h2. Contact

You can contact me on Twitter with questions/remarks : "@camillereynders":http://twitter.com/camillereynders
or send me a mail at:
info [at] creynders [dot] be

h2. Resources

"API documentation":http://creynders.github.com/dijon-framework/docs
"Demo":https://github.com/creynders/todomvc/tree/master/architecture-examples/dijon

h2. FEATURES

* framework independent: doesn't rely on any other 3rd party frameworks.
* framework integration: easily used on top of other frameworks
* coding style independent: can be used in class-based or module pattern style.
* routing: flexible enough to be used as a router
* MVC: although there are no specific classes or functions that enforce an MVC structure on your code, 
Dijon was specifically created to facilitate easy MVC(S) structure setup.
(See Demo)

h2. Basics
Dijon consists out of one object: dijon.System. You can call it directly or instantiate it through <code>new</code>,
whatever rocks your boat.

There are three different but closely related entities that can be registered with Dijon:
- objects, functions and "classes" can be registered to be lazily instantiated or called, either as a factory
or a singleton (a "good" singleton).
- outlets are injection points, they define what objects should be injected into which receiving objects
- handlers are callbacks that are registered to be called when a certain event (or route if you prefer) is 
sent through the system.


